00:01 The final building block that I want a touch on just a little bit 
00:04 but we won't focus very much if at all on it in this course, are templates.
00:08 So, we've seen that we can have renderers like json, 
00:11 and that will turn our response in from say a Python dictionary into a json object 
00:18 and that's great for services,
00:20 but if we want to have some kind of documentation page 
00:23 that we want to have maybe the service embedded inside of our website 
00:27 and our web also has sort of html type features,
00:30 then we will use one of these templates, 
00:32 and Pyramid supports a number of languages,
00:35 this one happens to be Chamelon, I think Chameleon is 
00:37 by far the cleanest, simplest, most html like and html friendly 
00:42 of all the various temple languages, 
00:45 but you could configure it to pick whichever one you want,
00:47 and the idea is we're going to take one of those models 
00:50 and we're going to pass it here, 
00:52 and we saw before we were sending off to the xml,
00:54 some kind of xml renderer this model that has an albums list in it 
01:00 and within each item in that list, 
01:03 we had an album with a url title and a has preview.
01:06 So if we pass that to this template,
01:09 we would be able to generate a report or display of them like this,
01:13 so maybe we want to have like a real simple html page,
01:16 it says here's the contents, and it says what we want to do is
01:19 for each album I want to have a div that contains two urls,
01:24 right so we can use tal:repeat, we can say we're going to repeat 
01:28 basically do a for in loop for every a to find in variable a in albums, 
01:33 we are going to generate a copy of this div
01:36 and then within there, we're going to crab out the url and the title
01:41 you do that with dollar curly value and put 
01:44 whatever python expression you want in there and then close that off,
01:47 and you can also have conditional, so not all of the albums have previews 
01:50 and we don't want to show the preview link if there's no preview available,
01:54 so we'll say only show that second link tal:condition if a.has preview.
01:59 Alright so expressions are written with curly parentheses expression 
02:04 the conditionals are done with tal:condition.
02:07 Now, if we were to actually execute this, 
02:10 we want to send that model over to it, 
02:12 obviously it's unstyled, there's no css here, 
02:14 so we come up looking pretty dull, 
02:16 but you would get something basically like this, 
02:19 alright buy digital age kids, that one has a preview,
02:22 buy freedom songs that one has a preview,
02:25 buy make money- that one has no preview, so it doesn't show up.